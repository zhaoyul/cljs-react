#+TITLE: 函数定义
#+SLUG: stdlib-fn-defs
#+DESCRIPTION: 定义函数和解析参数有很多种方式. 在这一章中, 我们将学习更多关于函数定义、解构以及一些有用的高阶函数的信息.
#+SETUPFILE: https://gitee.com/zhaoyuKevin/org-theme/raw/master/org/theme-readtheorg.setup

* 函数定义

到目前为止, 我们已经见过使用 ~defn~ 来定义函数的用法. 但我们的大多数示例都是人为构造的, 并不接近现实世界的用例.
在工作中, 我们定义的函数可能需要处理可变数量的参数. 或者, 它们可能需要解构作为参数传递的复杂映射.

在本章中, 我们将学习Clojure中定义函数的各个方面. 本章的示例编码在 ~first-project.fn-defs~ 命名空间中.

问： ~first-project.fn-defs~ 文件的磁盘路径是什么.

** 多态函数
多态函数允许你接受不同数量或类型的变量作为函数的参数. 它们通过为不同的参数定义不同的执行路径来工作, 并通常用于提供默认参数：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "5-11"
多态函数在概念上类似于函数重载.

** 匿名函数
匿名函数是没有归属的函数, 即没有命名空间限定的. 它们只存在于定义的点. 它们对于定义回调或简单的谓词等各种应用很有用.

有两种方法可以定义内联函数：
- 使用 ~fn~ 函数
- 使用`#()`简写

#+BEGIN_SRC clojure
{lang=clojure,crop-start-line=12,crop-end-line=17}
<<[first-project/src/first_project/fn_defs.cljs](./protected/source_code/first-project/src/first_project/fn_defs.cljs)
#+END_SRC

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "12-18"

~fn~ 和 ~defn~ 有类似的签名, 除了使用 ~fn~ 时没有函数名称. 使用简写时, 我们完全跳过参数向量并使用`%n`符号访问参数, 其中 ~n~ 是参数的索引, 从1开始.

匿名函数就像普通函数一样, 可以直接评估和调用.

如果你只需要捕获一个参数, 你可以跳过索引并简单使用`%`. 匿名函数在处理 ~map~ 和 ~reduce~ 等序列操作时很有帮助. 我们很快就会看到它们的实际应用.

** 文档字符串
使用 ~defn~ 或 ~fn~ 定义的函数可以遵循另一种签名来指定内联文档：
```clojure
(defn fn-name
  "关于这个函数做什么的一行说明"
  [arg1 arg2 arg3]
  ;; 主体
  )
```

** 可变参数函数
可变参数或变参函数允许你将任意数量的参数作为列表捕获. 我们已经在 ~first-project.core~ 命名空间中看到了这个函数.

可变参数函数使用`&`符号表示可变数量的参数：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "21-23"
~rest~ 变量在函数作用域中作为列表可用.

如果我们用5个参数调用 ~f~ ：`(f 1 2 3 4 5)`, 那么 ~arg1~ 的值将是 ~1~ , 而 ~rest~ 将是4个元素的列表：`'(2 3 4 5)`.

**  ~apply~ 函数
到目前为止, 我们

通过手动传递参数来调用函数. 例如, 上面定义的 ~f~ 函数是通过键入`(f 1 2 3 4 5)`来调用的. 但是, 如果你想要为n个整数的列表调用 ~f~ 怎么办？如果这些参数存储在一个变量中呢？

 ~apply~ 函数允许你“解包”序列并将它们用作函数参数.

#+BEGIN_SRC clojure
{lang=clojure,crop-start-line=24,crop-end-line=24}
<<[first-project/src/first_project/fn_defs.cljs](./protected/source_code/first-project/src/first_project/fn_defs.cljs)
#+END_SRC

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "24-25"
这与调用相同：
```clojure
(f 1 4 5 2 4 5 2 42)
```
除了参数现在是一个向量（或其他变量）.

** 解构参数
在React等UI编程框架中, 将 ~props~ （或映射）传递给子组件很常见. 将配置映射作为函数参数传递也相当常见.

有时, 你可能只需要参数的一小部分. 解构可以帮助你准确地提取所需的部分.

### 向量和列表
假设一个函数接受一个3元素向量作为参数. 这个向量直接从数据库中获取, 并按顺序包含用户的姓名、年龄和身高（以厘米为单位）. 如果我们想要获取姓名、年龄和身高, 根据我们迄今为止所知, 我们可以写出类似的东西：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "28-36"

这并不让人满意. 使用序列解构, 同样的代码可以重写为：


#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "37-40"

解构序列时元素的顺序很重要.

如果你不关心一个参数, 比如年龄, 你可以使用`_`下划线代替变量名：


#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "42-45"

你可以让它保持 ~age~ , 但如果一个变量在函数中没有使用, linter可能会抱怨. 你也可以使用`_age`而不是仅仅是`_`来指定你不关心的参数. `_`前缀也可以用于普通函数, 即不使用解构的地方.

你还可以在 ~let~ 绑定中使用解构. 取相同的3元素向量的例子, 以下代码是合法的：

```clojure
(let [[name _age height] p]
 ...
 )
```

如果你解构并没有提取序列的所有元素, 尾部元素会被忽略：

```clojure
(let [[name] p]
  ;; 取p的第一个元素并将其分配给name
  ...
  )
```

### 映射
假设我们对用户有以下的世界观：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "48-54"

我们将这个用户传递给一个打印他们的姓名和年龄的函数. 根据我们迄今为止所知, 这个函数的定义可能看起来类似于：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "55-57"

这似乎是合理的, 但随着函数承担责任, 这可能会变得失控. 此外, 如果你想要多次使用 ~age~ 或 ~name~ 会发生什么？你可以在多个地方调用关键字作为函数, 但 ~let~ 绑定更有意义：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "58-63"

上面的例子更加现实. 使用映射解构, 这个函数可以重写为：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "64-68"

还有一些重复. 变量 ~age~ 和映射键`:age`出现了两次. 如果你想在函数作用域中将映射键`:age`称为其他东西, 这可能是有帮助的. 但如果你想要变量名与映射键相同, 你可以进一步重写同一个函数：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "70-73"

我们可以更进一步, 通过直接解构参数来摆脱 ~let~ ：
```clojure
(defn prn-users5 [{:keys [name age]}]
        ;; 在这里使用name和age做一些事情
        )
```
### 解构默认参数
在现实世界中, 表示你对用户了解的映射可能不是完美的. 它可能缺少一些信息. 例如, 我们的用户John没有有关时区的任何信息. 如果映射中缺少所需信息, 解构允许你假设默认值：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "74-78"

### 嵌套解构
所有解构构造与任何级别的嵌套以相同的方式工作.

如果你有一个2x2矩阵并想要解构所有元素, 你可以简单地嵌套语法：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "80-88"

我们在上面的示例中添加了额外的换行符以获得更好的可读性. 随着你习惯了语法, 你将能够在一行中读写像这样的解构：`[[a b] [c d]] [[1 3] [4 5]]`

我们也可以以类似的方式解构嵌套映射：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "90-95"

嵌套映射解构是 ~prn-user4~ 和 ~prn-user5~ 中使用的解构技术的组合. 如果你第一次看不懂, 没关系. 随着你使用函数, 你将发展出阅读复杂解构的眼光！

** 宏与函数
我们已经提到了许多函数（如 ~when~ 和 ~defn~ ）, 实际上它们是宏. 宏在构建时重写你的代码. 例如,  ~defn~ 宏将你的函数定义：
#+begin_src clojure
(defn hello [name]
  (prn name))
#+end_src


转换为变量定义（ ~def~ ）：
#+begin_src clojure
(def hello (fn [name]
  (prn name)))
#+end_src

我们将不会详细研究宏, 但我们应该明确一些我们称之为函数的符号可能是宏.

** 组合
函数组合允许我们将多个函数依次应用于一个参数.  ~comp~ 函数接受多个函数并返回一个新函数, 是输入函数的有效组合：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "98-104"

在上面的示例中, 组合函数 ~inc-square~ 首先对输入进行平方, 然后将其 ~inc~ 增加1. `((comp p q r) args)`与`(p (q (r args)))`相同.

** 局部函数
局部函数（或局部函数）通过设置默认值来减少函数的参数数量：


#+INCLUDE: "./protected/source_code/first-project/src/first_project/fn_defs.cljs" src clojure :lines "107-113"

 ~add~ 函数接受2个参数.  ~add5~ 局部设置了 ~add~ 的默认参数为5.

** 结论
在本章中, 我们学习了各种类型的函数定义. 然后我们转移到了参数解构, 并在函数和宏之间做了区分.

解构使代码简洁, 但同时对初学者来说阅读起来很困难. 随着你了解各种解构方法的知识, 你将能够更轻松地阅读公开可用的代码, 并随着时间的推移, 写出高效简洁的Clojure代码.
