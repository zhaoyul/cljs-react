#+TITLE: Atom
#+SLUG: stdlib-atoms
#+DESCRIPTION: 原子是处理可变状态的线程安全容器. 在这一章中, 我们将学习如何创建和操作原子. 我们还将学习如何挂接到原子的生命周期并执行副作用.
#+SETUPFILE: https://gitee.com/zhaoyuKevin/org-theme/raw/master/org/theme-readtheorg.setup

* 原子

所有Clojure数据结构都是不可变的, 但现实世界可能并非如此. 任何有用的应用程序都会有一些随时间变化的状态. Clojure原子是一种线程安全的构造, 用于适应可变状态.

在像JVM这样的真正多线程环境中, 原子保证了跨线程的原子更新.

本章中的示例位于 ~first-project.atoms~ 命名空间. 我们建议创建此文件并跟随操作！

** 创建一个原子
使用 ~atom~ 函数可以创建新的原子. 第一个参数是初始值. 这个初始值可以是任何东西：数字、映射、函数、其他原子等.

#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "4-9"

 ~atom~ 函数也接受两个可选的关键字参数：
-  ~:validator~ ：在更新原子的值之前运行的谓词, 如果返回false, 则不更新值
-  ~:metadata-map~ ：保存原子元数据的键值对

如果eval一个原子, 会看到它的初始值和包裹对象. 这可能会根据底层语言而有所不同. 对于JavaScript, 它看起来像：


#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "11-12"
** 获取原子的当前值
Clojure原子是Clojure引用（reference）的一个实例. 我们不会深入讨论refs. 但可以将ref视为原子的基类.

要获取原子（或任何引用）的当前值, 我们可以使用 ~deref~ 方法. 有两种方式进行 ~deref~ ：

1. 使用 ~@~ 前缀的字面方式
2. 使用 ~deref~ 函数的函数式方式


#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "14-16"

** 重置当前值
如果想在不关心初始值的情况下更新值, 可以使用 ~reset!~ 函数. 这个函数接受两个参数, 要重置的原子及其新值.

以感叹号结尾的函数通常表示不安全或不纯的操作. 感叹号通常被读作“bang”.

如果新值被设置在原子上, 新设置的值被返回并且原子被就地更新. 如果值未被设置, 即验证失败, 会引发错误并且原子保持不变.

#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "19-23"

** 交换当前值
在更新依赖于原子之前的状态的情况下, 例如向向量添加, 可以使用 ~swap!~ 函数.

 ~swap!~ 的签名是 ~(swap! atom f & args)~. ~& args~ 表示0个或更多额外参数.

 ~f~ 是一个纯函数, 它被调用时带有原子的当前值和新的args： ~(f @atom & args)~ . 原子的值更新为

这个函数的返回值, 并返回新设置的值.


#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "25-34"

 ~conj~ 和 ~pop~ 分别向向量添加一个元素和移除最后一个元素.  ~assoc~ （或关联）向映射添加一个键值对.

还记得在 ~语法和原生数据类型~ 章节中首次遇到这些函数的情况吗？还记得这些操作的不可变性吗？

 ~(assoc {} :a :b)~ 不会更新原始映射, 而是返回一个新的. 原子帮助我们安全地变更状态.

** 观察变化
可以添加一个钩子来观察对原子状态所做的更改. 在希望在状态改变后运行不纯的操作的情况下, 这很有用. 例如, 可能想要在原子更新时记录更改或重新渲染UI.

 ~add-watch~ 函数接受一个原子, 一个标识符关键字和一个状态变化时要调用的函数.

#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "37-41"
当执行 ~reset!~ 函数时, 在运行时, 即运行中的Node脚本中打印了一条日志语句：

[[file:public/assets/log-statement.png]]

可以使用 ~remove-watch~ 函数移除一个观察者：

#+INCLUDE: "./protected/source_code/first-project/src/first_project/atoms.cljs" src clojure :lines "42-43"

** 使用 ~let~ 绑定的局部原子
到目前为止, 我们使用的所有原子都是使用 ~def~ 宏定义的. 使用 ~def~ 生成的变量在那个命名空间中是全局的.  ~let~ 函数允许定义局部变量：

#+begin_src clojure
(let [a (atom 0)
      b (atom {})
          c :any-other-data-type]
  ;; a 只在这个范围内定义
  a)
#+end_src

~let~ 定义也称为“let绑定”.  ~let~ 需要一个元素数量为偶数的向量. 在 ~let~ 绑定中定义的变量只在 ~let~ 闭包内可用.  ~let~ 列表的最后一个元素是返回值. 在上面的示例中, 原子 ~a~ 将在评估时被返回.

使用 ~let~ 绑定不仅限于原子. 任何有效的Clojure数据类型/结构都可以在 ~let~ 绑定中定义.

** 结论
在这一章中, 我们学习了原子以及如何处理可变状态. 我们学习了如何观察变化并执行副作用.

我们还看到了使用 ~let~ 绑定的局部变量的用法.
