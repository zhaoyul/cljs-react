#+TITLE: 编辑器
#+SLUG: 熟悉编辑器
#+DESCRIPTION: 在本章中, 我们将借助编辑器的帮助来驯服LISPy的语法. 本章将介绍我们需要的工具.
#+isPublicLesson: true
#+SETUPFILE: https://gitee.com/zhaoyuKevin/org-theme/raw/master/org/theme-readtheorg.setup

* 编辑器工具

Lisp世界的一个主要入门障碍是有别于c系列的语法.

下面是将map映射转换为url中查询字符串的函数示例(如果它看起来没有意义, 不用担心, 很快就会有的):

#+begin_src clojure
  (defn map->query-string [m]
    (reduce
     (fn [acc [k v]]
       (str acc "&" k "=" v))
     "" m))
#+end_src


** Lisp代码是一棵树

Lisp代码以树形形式编写, 而C风格的代码以散文形式编写. 如果检查上面的代码, 并假设圆括号和方括号表示一个集合, 那么树结构就变得明显了.

基于树的代码也被称为S-表达式或简称sexp. 上面定义的函数可以视为下面的树:

[[file:public/assets/tree.svg]]

为了帮助括号匹配和缩进, 我们将使用两个工具: Paredit和Rainbow Params.

** Paredit

Paredit是一个结构编辑工具. 最初是为Emacs构建的, 但大多数主要编辑器都有维护良好的移植版.

Paredit启用了多个热键, 这些热键:
- 轻松操纵Lisp代码
- 防止意外删除括号
- 插入匹配的参数
- 将符号移入和移出括号
- etc.

我们将在后面的章节中学习Paredit的功能.

如果这是第一次写Lisp, 会有些不自在. 但随着学习的深入, 会发现这是最好的代码编辑方式.

** Rainbow Params

即使在发展了对S-表达式的感觉之后, 可能仍然发现很难直观地了解函数的作用域, 即函数开始和结束的地方.

当的函数开始执行更复杂的任务时, 情况会变得更糟.

Rainbow Params(根据的编辑器可能有不同的名称), 为每对括号赋予唯一的颜色. 有了这个插件, 上面定义的函数将如下所示:

[[file:public/assets/rainbow-params.png]]

** REPL

因为Lisp以树形方式编写, 这使得在运行时实时更新程序的各个部分变得非常容易. REPL插件与语法无关, 但与开发生命周期密切相关.

对于大多数Lispy语言来说, REPL是不可获取的工具. 除了REPL可以执行表达式, 对于自动完成系统, 定义跳转, 代码重构都有深度参与.

如果读到这儿感觉不知所云, 完全不用担心. 接下来有一章专门讲解REPL的使用, 因为这是语言最重要的特性之一.

** 本课程支持的编辑器

Emacs是用于编写Lisp的首选编辑器. 也是我们的首选(即使在windows上), 大多数主要编辑器都支持Lisp. 为了本课程的目的, 我们假设有:
- Emacs
- VS Code
- IntellJ IDE

除了最初设置有异, 编辑器的开发工作流程是相同的. 通过一些调整, 可以轻松地在Vim(借助Conjure插件)和Sublime上使其工作.

公司内部人员, 请选用Emacs, 除了代码编辑, 我们还有很多的文档流程建立在Emacs之上.

IntelliJ IDE拥有最佳的开箱即用体验. 它也是最消耗资源的. Emacs是首选, 并且在 [[https://clojure.org/news/2023/06/30/state-of-clojure-2023][2020年Clojure状态调查]]中, 超过40%的参与者使用它.


** 结论
在本章中, 我们看到了Lisp代码的树结构, 并介绍了帮助编写S-表达式的工具. 在接下来的部分中, 我们将实际安装这些工具并学习如何使用它们.
