#+TITLE: Paredit
#+SLUG: language-semantics-paredit
#+DESCRIPTION: Paredit是一个帮助结构化编辑的工具. 它帮助你非常轻松地编写和修改S-表达式, 以至于括号几乎会消失！在这一章中, 我们将学习Paredit的基本命令.

#+SETUPFILE: https://gitee.com/zhaoyuKevin/org-theme/raw/master/org/theme-readtheorg.setup

* Paredit

Paredit帮助进行结构化编辑. 用非术语来说, 它是一个辅助编写S-表达式的工具. 由于Paredit依赖于你使用的编辑器, 我们将在本章中只覆盖核心特性. 最后, 我们将分享编辑器特定资源的链接.

本章的呈现风格受到了[[http://danmidwood.com/][Dan Midwood]] 的 [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Animated guide to Paredit]] 的启发.

Paredit是Lisper工具箱中不可或缺的一部分. 本章是你在课程进展中可以反复参考的备忘单.

我们在 ~Getting Started~ 部分安装了Paredit. 如果你是VSCode用户, 你不需要单独安装Paredit, 因为它随Calva一起提供.

我们将重新使用 ~first-project.core~ 命名空间来测试各种Paredit特性. 我们建议你跟随操作！

** 括号成对平衡
当你打开一个括号时, 你可能已经观察到Paredit会自动添加关闭括号.
当你删除一个括号时, 关闭部分也会自动删除.

[[file:public/assets/balancing.gif]]

** 删除保护
Paredit通过只允许删除S-表达式的叶节点来防止意外删除括号.
如果你尝试删除一个父节点, 光标只会向后移动.


[[file:public/assets/delete-protection.gif]]

注意当我在第13行有子节点的表单上按`backspace`时, 光标只是向后移动.
而第15行没有任何子节点（即子表单）的表单在删除时被删除.

当你的表单变得更复杂时, 删除保护会有所帮助. 一开始, 你可能会觉得有点烦人, 但你很快就会习惯.

** 前向和后向Slurp
Slurp将一个表单吞噬到列表中. 前向Slurp吞噬列表末尾紧邻的表单, 而后向Slurp吞噬列表前面紧邻的表单.

[[file:public/assets/slurp.gif]]

Slurp的键盘快捷键取决于你使用的编辑器. 我们注意到这些快捷键有时会与操作系统或现有的快捷键冲突. 你可能需要根据你的设置（特别是如果你使用Mac）重新绑定一些命令. 默认快捷键是：

| 命令      | VS Code           | Emacs        | IntelliJ     |
|-----------+-------------------+--------------+--------------|
| 前向Slurp | Ctrl+右箭头       | Ctrl+Shift+) | Ctrl+Shift+K |
| 后向Slurp | Ctrl+Shift+左箭头 | Ctrl+Shift+( | Ctrl+Alt+J   |


[[file:public/assets/slurp.png]]

如果你正在寻找重新绑定你的键, 我们建议使用Emacs绑定. 这就是我们在演示中所拥有的.

** 前向和后向Barf
Barf将一个表单从列表中推出. 前向Barf移除最右边的表单, 后向Barf移除最左边的表单.

[[file:public/assets/barf.gif]]

| 命令     | VS Code           | Emacs        | IntelliJ     |
|----------+-------------------+--------------+--------------|
| 前向Barf | Ctrl+左箭头       | Ctrl+Shift+} | Ctrl+Shift+J |
| 后向Barf | Ctrl+Shift+右箭头 | Ctrl+Shift+{ | Ctrl+Alt+K   |


[[file:public/assets/barf.png]]

** 拼接或展开
拼接杀死列表, 同时保持其子节点不变.

[[file:public/assets/splice.gif]]

| 命令 | VS Code    | Emacs | IntelliJ |
|------+------------+-------+----------|
| 拼接 | Ctrl+Alt+S | M-s   | Alt-S    |

file:public/assets/splice.png

** 包围
Wrap用括号或引号包围一个S-表达式.

[[file:public/assets/splice.gif]]

| 命令         | VS Code          | Emacs                   | IntelliJ     |
|--------------+------------------+-------------------------+--------------|
| 用引号包围   | Ctrl+Alt+Shift+Q | M-"                     | Ctrl+Shift+" |
| 用括号包围   | Ctrl+Alt+Shift+P | M-(                     | Ctrl + (     |
| 用方括号包围 | Ctrl+Alt+Shift+S | M-x paredit-wrap-square | Ctrl + [     |
| 用花括号包围 | Ctrl+Alt+Shift+C | M-x paredit-wrap-curly  | Ctrl + {     |

[[file:public/assets/splice.png]]

#+begin_quote
如果你是Emacs用户, 我们建议添加自定义快捷键: ~M-[~ 用于方括号包围和 ~M-{~ 用于花括号包围.
#+end_quote


** 外部资源
本章覆盖了使用Paredit的绝对必要性. 然而, Paredit提供了更多. 根据你的编辑器, 参考以下的链接:

| 编辑器  | 作者              | 链接                                                                                    |
|---------+-------------------+-----------------------------------------------------------------------------------------|
| VS Code | Calva Docs        | [文章](https://calva.io/paredit/)                                                       |
| Cursive | Cursive Docs      | [文章](https://cursive-ide.com/userguide/paredit.html)                                  |
| Cursive | John Madison      | [视频](https://www.youtube.com/watch?v=18WtDzYHKCI)                                     |
| Cursive | Cheatorgraphy.com | [速查表](https://cheatography.com/tag/cursive/)                                         |
| Emacs   | Dan Midwoord      | [文章](http://danmidwood.com/content/2014/11/21/animated-paredit.html)                  |
| Emacs   | Artur Malabarba   | [文章](https://endlessparentheses.com/a-few-paredit-keys-that-take-over-the-world.html) |

** 结论
在这一章中, 我们学习了Paredit和结构化编辑. 很有可能你会觉得它很烦人.
Paredit是所有Lisper最终都会欣赏的工具. 只需给它一些时间, 让它沉淀.
一旦你理解了基础知识, 你的代码将感觉更简洁, 更易于编辑.

假设一个人可以一次性学会所有这些命令是不合理的, 事实是你不需要.
将本章作为参考, 需要时再回来查看. 随着时间的推移, 这些命令将进入你的肌肉记忆.
我们建议你先关注Slurp和Barf. 我们还建议你重新绑定你的键, 使Paredit更符合人体工程学, 特别是如果你使用VS Code.
