* 生产打包
  :PROPERTIES:
  :CUSTOM_ID: adv-prod-packaging
  :DESCRIPTION: 打包应用包括多个步骤, 如配置, 压缩等. 在本章中, 我们将使用生产配置打包我们的应用, 并创建一个优化的JS包, 可以部署在任何CDN上.
  :END:

** 生产打包
将前端应用推送到生产环境包括三个重要步骤:
- 设置生产配置
- 代码拆分
- 代码和资源的压缩.

在本章中, 我们将为Tinycanva应用应用生产配置, 并生成一个可部署的包. 我们将在下一章中专注于代码拆分.

*** 添加生产配置
Tinycanva配置位于=app.config=命名空间中. 它有两个环境: =dev= 和 =prod=, 以及一个用于选择特定环境配置的函数. 当前配置仅包括Firebase, 但实际应用可能会有多个API端点, 分析ID和其他数据.

为了简单起见, 我们假设我们的=prod=配置与=dev=配置相同. 让我们将=dev=配置映射复制到=prod=:

#+BEGIN_SRC clojure :crop-start-line 14 :crop-end-line 23
<<[./tinycanvas/src/app/config.cljs](./protected/source_code/tinycanva/src/app/config.cljs)
#+END_SRC

*** 通过环境变量加载生产配置
配置在 =app.core= 命名空间中加载. 当我们首次设置配置时, 我们将 =:dev= 硬编码为默认环境.

为了实用地切换这个环境, 我们将使用[[https://opensource.com/article/19/8/what-are-environment-variables][bash环境变量]].

首先, 我们需要读取环境变量并使其可用于应用程序. 这可以通过结合使用[[https://shadow-cljs.github.io/docs/UsersGuide.html#shadow-env][#shadow/env]]和[[https://cljs.github.io/api/compiler-options/closure-defines][:closure-defines]]来完成.

=#shadow/env= 帮助我们读取环境变量, 而 =:closure-defines= 将值设置为任何命名空间中的变量. 请注意拼写 =closure=. 这不是拼写错误, 我们并不是指 =clojure=.

[comment]: <GM: define it AS app.core?>
=:closure-defines=是Google的Closure Compiler的属性, ClojureScript使用它将CLJS编译为JS. 让我们更新我们的=shadow-cljs.edn=以读取此环境变量并将其定义为=app.core=:

#+BEGIN_SRC clojure :crop-start-line 2 :crop-end-line 8
<<[./tinycanvas/shadow-cljs.edn](./protected/source_code/tinycanva/shadow-cljs.edn)
#+END_SRC

=:closure-defines=行基本上要求Shadow定义环境变量=app.core/app-env=, 其值为环境变量=APP_ENV=.

现在可以在 =app.core= 中使用 =goog-define= 读取此变量:

#+BEGIN_SRC clojure :crop-start-line 15 :crop-end-line 19
<<[./tinycanvas/src/app/core.cljs](./protected/source_code/tinycanva/src/app/core.cljs)
#+END_SRC

=goog-define= 类似于 =def=. 唯一的区别是, 与在运行时评估的 =def= 不同, =goog-define= 在编译时求值.

我们使用 =goog-define= 将 =app-env= 的默认值设置为"dev". 这将被 =:closure-defines= 中的值覆盖. 然后我们使用此值加载适用的配置.

*** 生产构建

最后一步是将环境变量设置为"prod"以进行生产构建. 生产构建使用 =shadow-cljs release= 命令创建. 此命令丑化和压缩代码库. =create-cljs-app= 设置一个NPM脚本 =build= 来运行此命令. 我们可以更新 =package.json= 并将环境变量设置为 =prod= 以运行此命令:

#+BEGIN_SRC clojure :crop-start-line 11 :crop-end-line 11
<<[./tinycanvas/package.json](./protected/source_code/tinycanva/package.json)
#+END_SRC

现在, 如果您关闭 =watch= 进程并在终端中执行 =yarn build=, 应用将以生产模式编译到 =public= 文件夹中:

```bash
$ yarn build
yarn run v1.21.1
$ yarn clean && APP_ENV=prod shadow-cljs release app
$ rimraf public/js

;; 日志和警告

[:app] 构建完成. (325个文件, 263个编译, 0个警告, 101.92秒)
✨ 完成时间为136.18秒.
此时，我们的shadow应用是一个静态前端应用，可以使用任何服务器提供。让我们尝试运行它：


$ cd public
\$ npx serve
# 或 python3 -m http.server
您会注意到应用以"prod"配置运行。

App在“prod”模式下运行

=/public=文件夹现在可以部署到任何提供商（Netlify、Vercel、Surge、S3），使您的应用可以访问互联网。

*** 结论
在本章中，我们学习了如何使用环境变量应用特定于环境的配置。我们还学习了如何为部署打包CLJS应用。
