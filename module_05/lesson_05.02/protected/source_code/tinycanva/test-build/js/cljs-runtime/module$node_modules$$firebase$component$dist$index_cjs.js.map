{
"version":3,
"file":"module$node_modules$$firebase$component$dist$index_cjs.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/@firebase/component/dist/index.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$firebase$component$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar Component = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    function Component(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n    }\r\n    Component.prototype.setInstantiationMode = function (mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    };\r\n    Component.prototype.setMultipleInstances = function (multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    };\r\n    Component.prototype.setServiceProps = function (props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    };\r\n    return Component;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nvar Provider = /** @class */ (function () {\r\n    function Provider(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    Provider.prototype.get = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            var deferred = new util.Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            // If the service instance is available, resolve the promise with it immediately\r\n            try {\r\n                var instance = this.getOrInitializeService(normalizedIdentifier);\r\n                if (instance) {\r\n                    deferred.resolve(instance);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception during get(), it should not cause\r\n                // a fatal error. We just return the unresolved promise in this case.\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    };\r\n    Provider.prototype.getImmediate = function (options) {\r\n        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        try {\r\n            var instance = this.getOrInitializeService(normalizedIdentifier);\r\n            if (!instance) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                throw Error(\"Service \" + this.name + \" is not available\");\r\n            }\r\n            return instance;\r\n        }\r\n        catch (e) {\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    };\r\n    Provider.prototype.getComponent = function () {\r\n        return this.component;\r\n    };\r\n    Provider.prototype.setComponent = function (component) {\r\n        var e_1, _a;\r\n        if (component.name !== this.name) {\r\n            throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\r\n        }\r\n        if (this.component) {\r\n            throw Error(\"Component for \" + this.name + \" has already been provided\");\r\n        }\r\n        this.component = component;\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService(DEFAULT_ENTRY_NAME);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        try {\r\n            // Create service instances for the pending promises and resolve them\r\n            // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n            // and all promises with resolve with it regardless of the identifier.\r\n            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];\r\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                try {\r\n                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                    var instance = this.getOrInitializeService(normalizedIdentifier);\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception, it should not cause\r\n                    // a fatal error. We just leave the promise unresolved.\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    Provider.prototype.clearInstance = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    };\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    Provider.prototype.delete = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var services;\r\n            return tslib.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        services = Array.from(this.instances.values());\r\n                        return [4 /*yield*/, Promise.all(services\r\n                                .filter(function (service) { return 'INTERNAL' in service; })\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service.INTERNAL.delete(); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Provider.prototype.isComponentSet = function () {\r\n        return this.component != null;\r\n    };\r\n    Provider.prototype.getOrInitializeService = function (identifier) {\r\n        var instance = this.instances.get(identifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\r\n            this.instances.set(identifier, instance);\r\n        }\r\n        return instance || null;\r\n    };\r\n    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    };\r\n    return Provider;\r\n}());\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar ComponentContainer = /** @class */ (function () {\r\n    function ComponentContainer(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    ComponentContainer.prototype.addComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\r\n        }\r\n        provider.setComponent(component);\r\n    };\r\n    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    };\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    ComponentContainer.prototype.getProvider = function (name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        var provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    };\r\n    ComponentContainer.prototype.getProviders = function () {\r\n        return Array.from(this.providers.values());\r\n    };\r\n    return ComponentContainer;\r\n}());\n\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;\n//# sourceMappingURL=index.cjs.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","tslib","util","Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","prototype","setInstantiationMode","Component.prototype.setInstantiationMode","mode","setMultipleInstances","Component.prototype.setMultipleInstances","setServiceProps","Component.prototype.setServiceProps","props","Provider","container","component","instances","Map","instancesDeferred","get","Provider.prototype.get","identifier","DEFAULT_ENTRY_NAME","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","instance","getOrInitializeService","resolve","e","promise","getImmediate","Provider.prototype.getImmediate","options","_a","__assign","optional","Error","getComponent","Provider.prototype.getComponent","setComponent","Provider.prototype.setComponent","_b","__values","entries","_c","next","done","_d","__read","instanceDeferred","instanceIdentifier","e_1_1","e_1","error","return","call","clearInstance","Provider.prototype.clearInstance","delete","Provider.prototype.delete","__awaiter","services","__generator","label","Array","from","values","Promise","all","filter","service","map","INTERNAL","sent","isComponentSet","Provider.prototype.isComponentSet","Provider.prototype.getOrInitializeService","undefined","Provider.prototype.normalizeInstanceIdentifier","ComponentContainer","providers","addComponent","ComponentContainer.prototype.addComponent","provider","getProvider","addOrOverwriteComponent","ComponentContainer.prototype.addOrOverwriteComponent","ComponentContainer.prototype.getProvider","getProviders","ComponentContainer.prototype.getProviders"]
}
