{"version":3,"sources":["app/domain/firebase.cljs"],"mappings":"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","names":["app.domain.firebase/firebase-user->user","user","app.domain.firebase/observe-auth-state","re-frame.core/dispatch","js/module$node_modules$firebase$dist$index_cjs.auth","app.domain.firebase/init","config","js/module$node_modules$firebase$dist$index_cjs.apps","js/module$node_modules$firebase$dist$index_cjs.initializeApp","cljs.core/clj->js","re_frame.core.reg_event_fx","p__40902","vec__40903","cljs.core.nth","cofx","_","form-state","cljs.core.assoc","re_frame.core.reg_event_db","p__40906","vec__40907","db","err","p__40910","vec__40911","p__40914","vec__40915","p__40918","vec__40919","loading-user-from-cache?","p__40922","map__40923","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/Date","p__40925","p__40926","map__40927","vec__40928","new-entry","js/console.log","cljs.core.dissoc","p__40932","vec__40933","app.domain.firebase/create-graphic-error-handler","error","p__40936","map__40937","p__40939","vec__40940","graphics","p__40943","p__40944","map__40945","vec__40946","graphic-id","cljs.core.update","cljs.core/conj","cljs.core/name","p__40951","vec__40952","p1__40950#","cljs.core.remove","cljs.core/dissoc","cljs.core.keyword","p__40955","p__40956","map__40957","vec__40958","new-graphic","p__40962","vec__40963","cljs.core/assoc-in","cljs.core.js__GT_clj","p__40966","vec__40967","re-frame.core/reg-fx","p__40970","map__40971","email","password","js/module$node_modules$firebase$dist$index_cjs","p__40973","map__40974","node","data","on-error","on-success","ref","cljs.core.conj","p__40976","map__40977","snapshot","p__40979","map__40980","p__40983","map__40984","p1__40982#","p__40986","map__40987","throw-error?","re_frame.core.reg_sub","p1__40989#","p1__40990#","p1__40991#","p1__40992#","cljs.core/select-keys","app.domain.firebase/in?","coll","elm","p1__40993#","cljs.core/some","cljs.core._EQ_","p__40994","vec__40995","id","p__40998","vec__40999","cljs.core.get_in","p1__41002#"],"sourcesContent":["(ns app.domain.firebase\n  (:require [re-frame.core :as rf]\n            [\"firebase\" :as firebase]\n            [\"firebase/auth\"]))\n\n(defn firebase-user->user\n  \"Convert Firebase user object to Clojure map\"\n  [user]\n  (when user\n    {:uid (.-uid user)\n     :display-name (.-displayName user)\n     :photo-url (.-photoURL user)\n     :email (.-email user)\n     :user-obj user}))\n\n(defn- observe-auth-state []\n  (rf/dispatch [::set-loading-user-from-cache true])\n  (.onAuthStateChanged\n   (firebase/auth)\n   (fn [user]\n     (if user\n       (rf/dispatch [::user-logged-in (firebase-user->user user)])\n       (rf/dispatch [::user-logged-out])))))\n\n(defn init [config]\n  (when (zero? (alength firebase/apps))\n    (firebase/initializeApp (clj->js config))\n    (observe-auth-state)))\n\n;; Events\n(rf/reg-event-fx\n ::login-with-email ;; equivalent to :app.domain.firebase/login-with-email\n (fn [cofx [_ form-state]]\n   {:db (assoc (:db cofx)\n               ::login-loading? true)\n    :firebase/email-auth form-state}))\n\n(rf/reg-event-db\n ::email-auth-error\n (fn [db [_ err]]\n   (assoc db ::login-error (.-message err) ::login-loading? false)))\n\n(rf/reg-event-db\n ::user-logged-in\n (fn [db [_ user]]\n   (assoc db ::user user ::login-loading? false ::loading-user-from-cache? false)))\n\n(rf/reg-event-fx\n ::logout\n (fn [_ _]\n   {:firebase/logout {}}))\n\n(rf/reg-event-db\n ::user-logged-out\n (fn [db [_ _]]\n   (assoc db ::user nil ::loading-loading? false ::loading-user-from-cache? false)))\n\n(rf/reg-event-db\n ::set-loading-user-from-cache\n (fn [db [_ loading-user-from-cache?]]\n   (assoc db ::loading-user-from-cache? loading-user-from-cache?)))\n\n(rf/reg-event-fx\n ::create-graphic\n (fn [{:keys [db]} _]\n   {:db (assoc db ::creating-graphic? true)\n    :firebase/add-to-list {:node (str \"/graphics/\" (-> db ::user :uid))\n                           :data {:created-at (js/Date)\n                                  :name \"Untitled\"}\n                           :on-success [::create-graphic-success]\n                           :on-error [::create-graphic-error]}}))\n\n(rf/reg-event-fx\n ::create-graphic-success\n (fn [{:keys [db]} [_ new-entry]]\n   (js/console.log new-entry)\n   {:db (dissoc db ::creating-graphic? ::create-graphic-error)\n    :dispatch [::fetch-graphics]}))\n\n(defn create-graphic-error-handler [db [_ error]]\n  (-> db\n      (dissoc ::creating-graphic?)\n      (assoc ::create-graphic-error error)))\n\n(rf/reg-event-db ::create-graphic-error create-graphic-error-handler)\n\n(rf/reg-event-fx\n ::fetch-graphics\n (fn [{:keys [db]} _]\n   {:db (assoc db ::fetching-graphics? true)\n    :firebase/read {:node (str \"/graphics/\" (-> db ::user :uid))\n                    :on-success [::fetch-graphics-success]}}))\n\n(rf/reg-event-db\n ::fetch-graphics-success\n (fn [db [_ graphics]]\n   (-> db\n       (dissoc ::fetching-graphics?)\n       (assoc ::graphics graphics))))\n\n(rf/reg-event-fx\n ::delete-graphic\n (fn [{:keys [db]} [_ graphic-id]]\n   {:db (update db ::deleting-graphic-ids conj graphic-id)\n    :firebase/delete {:node (str \"/graphics/\" (-> db ::user :uid) \"/\" (name graphic-id))\n                      :on-success [::delete-graphic-success graphic-id]}}))\n\n(rf/reg-event-db\n ::delete-graphic-success\n (fn [db [_ graphic-id]]\n   (-> db\n       (update ::deleting-graphic-ids #(remove #{graphic-id} %)) ;; 1\n       (update ::graphics dissoc (keyword graphic-id))))) ;; 2\n\n(rf/reg-event-fx\n ::update-graphic\n (fn [{:keys [db]} [_ graphic-id new-graphic]]\n   {:db (assoc db ::updating-graphic? true)\n    :firebase/update {:node (str \"/graphics/\" (-> db ::user :uid) \"/\" (name graphic-id))\n                      :data new-graphic\n                      :on-success [::update-graphic-success graphic-id new-graphic]\n                      :on-error [::update-graphic-error]}}))\n\n(rf/reg-event-db\n ::update-graphic-success\n (fn [db [_ graphic-id new-graphic]]\n   (-> db\n       (assoc-in [::graphics graphic-id :fabric-json] (-> new-graphic :fabric-json js->clj))\n       (dissoc ::updating-graphic?))))\n\n(rf/reg-event-db\n ::update-graphic-error\n (fn [db [_ err]]\n   (js/console.log err)\n   (dissoc db ::updating-graphic?)))\n\n;; Effects\n(rf/reg-fx\n :firebase/email-auth\n (fn [{:keys [email password]}]\n   (-> firebase\n       (.auth)\n       (.signInWithEmailAndPassword email password)\n       (.catch (fn [err]\n                 (rf/dispatch [::email-auth-error err]))))))\n\n(rf/reg-fx\n :firebase/logout\n (fn [_]\n   (-> firebase\n       (.auth)\n       (.signOut))))\n\n(rf/reg-fx\n :firebase/add-to-list\n (fn [{:keys [node data on-error on-success]}]\n   (let [ref (-> firebase\n                 (.database)\n                 (.ref node))\n         new-entry (.push ref)]\n     (-> new-entry\n        (.set (clj->js data))\n        (.then #(rf/dispatch (conj on-success new-entry)))\n        (.catch (fn [error]\n                   (rf/dispatch (conj on-error error))))))\n   ))\n\n(rf/reg-fx\n :firebase/read\n (fn [{:keys [node on-success on-error]}]\n   (-> firebase\n       (.database)\n       (.ref node)\n       (.once \"value\")\n       (.then (fn [snapshot]\n                (rf/dispatch (conj on-success (-> snapshot\n                                                  (.val)\n                                                  (js->clj :keywordize-keys true))))))\n       (.catch (fn [error]\n                 (when on-error\n                   (rf/dispatch (conj on-error error))))))))\n\n(rf/reg-fx\n :firebase/delete\n (fn [{:keys [node on-success on-error]}]\n   (-> firebase\n       .database\n       (.ref node)\n       .remove\n       (.then #(when on-success (rf/dispatch on-success)))\n       (.catch #(when on-error (rf/dispatch on-error)))\n       )))\n\n(rf/reg-fx\n :firebase/update\n (fn [{:keys [node data on-success on-error]}]\n   (-> firebase\n       .database\n       (.ref node)\n       (.update (clj->js data))\n       (.then #(when on-success (rf/dispatch on-success)))\n       (.catch #(when on-error (rf/dispatch (conj on-error %)))))))\n\n\n(rf/reg-fx\n :firebase/effect-to-test\n (fn [{:keys [throw-error? on-success on-error]}]\n   ;; perform side effects then dispatch\n   (rf/dispatch (if throw-error?\n                  (conj on-error :error-res)\n                  (conj on-success :success-res)))))\n\n;; Subscriptions\n(rf/reg-sub\n ::me\n (fn [db _]\n   (::user db)))\n\n(rf/reg-sub\n ::login-loading?\n (fn [db _]\n   (-> db ::login-loading?)))\n\n(rf/reg-sub\n ::login-error\n #(-> %1 ::login-error))\n\n(rf/reg-sub\n ::loading-user-from-cache?\n #(-> %1 ::loading-user-from-cache?))\n\n(rf/reg-sub\n ::creating-graphic?\n #(-> % ::creating-graphic?))\n\n(rf/reg-sub\n ::graphics\n #(select-keys % [::fetching-graphics? ::graphics]))\n\n(defn in?\n  \"true if coll contains elm\"\n  [coll elm]\n  (some #(= elm %) coll))\n\n(rf/reg-sub\n ::deleting-graphic-id?\n (fn [db [_ id]]\n   (-> db\n       ::deleting-graphic-ids\n       (in? id))))\n\n(rf/reg-sub\n ::graphic-by-id\n (fn [db [_ id]]\n   (get-in db [::graphics id])))\n\n(rf/reg-sub\n ::updating-graphic?\n #(-> % ::updating-graphic?))\n"]}