* 代码拆分
  :PROPERTIES:
  :CUSTOM_ID: adv-cs
  :DESCRIPTION: 大型应用会降低用户体验, 控制这一点的方法之一是将我们的代码拆分成块. 本章将介绍Shadow提供的工具来拆分我们的应用代码. 我们还将实现这些拆分并分析性能提升.
  :END:

** 代码拆分
JS生态系统使得开发JS应用变得快速, 但安装库会影响包的大小.

JS应用在gzip压缩前通常为1-5M. 这意味着客户端至少需要解析1MB的JS代码才能使其有意义. 这对于高性能的电脑没影响, 但对于低端移动硬件来说确实是一个问题.

Shadow为我们提供了一个高效的API来分析和拆分我们的代码为更小的块.

*** 包大小报告
在我们深入了解代码拆分的细节之前, 我们需要一种方法来衡量我们的当前状态. Shadow带有一个内置的报告工具, 列出了打包模块的大小和成分. 我们可以使用 =yarn report= 命令生成报告.

运行此命令后, 输出将打印到您的终端, 并在名为 =report.html= 的文件中:

[[file:public/assets/no-split.png]]

我们的应用当前为625kb gzipped, 没有任何代码拆分. 最重的四个模块包含了50%的代码. 我们的项目文件(即我们编写的代码)仅占编译代码的1.3%.

我们将尝试优化这一点, 并在进行中重新生成报告以检查我们的进展.

*** 代码拆分
代码拆分的过程包括两个步骤:
1. 配置编译器
2. 修改应用以加载拆分的代码

有了一个大包, 我们不需要担心我们的代码是否已加载, 但有了多个较小的包, 我们需要确保所有必需的代码都可用. 一种拆分代码的方法是按路由打包代码, 即每个路由一个模块.

我们有三个主要路由可以拆分: =/login=, =/register= 和 =/graphics=. 在现实世界中, 可能还希望拆分重组件. 例如, 在我们的情况下, 我们对Blueprint无能为力, 因为那是我们的UI层, 但Firebase和Fabric不需要渲染 =/= 索引路由.

**** Shadow配置
Shadow通过将入口点组合成 =modules= 来拆分代码. 模块是一个通用术语, 但您可以将拆分模块视为文件.

目前, 我们的Shadow配置仅生成一个模块 =:main=: - 只有一个文件 =main.js=, 我们在 =index.html= 中加载. 让我们更新我们的配置以生成每个路由一个模块:

#+BEGIN_SRC clojure :crop-start-line 3 :crop-end-line 11
<<[./tinycanva/shadow-cljs.edn](./protected/source_code/tinycanva/shadow-cljs.edn)
#+END_SRC

- =:module-loader true=注入了额外的代码, 使得在运行时可以获取模块
- 我们添加了三个额外的模块=:login=, =:register=和=:graphics=. 这将导致在配置的=:output-dir=中创建=login.js=, =register.js=和=graphics.js=以及=main.js=.
- 只有一个模块需要是无依赖的: 根模块, 对应用工作至关重要
- 其他模块可以使用=:depends-on=配置标记依赖项, 该配置接受一个集合. 可以依赖多个模块. 所有模块都需要依赖根模块.
- =:entries=键接受一个需要组合在模块内的命名空间的向量.

Shadow计算依赖图并尽力将大多数代码放在根模块之外. 可以将其视为尝试生成一个小的=:main=文件, 并将重组件推送到其他模块. 但这并不总是准确的, 需要调整.

**** 懒加载HOC
我们现在有了模块, 但如果您运行应用, Shadow会抱怨无法拆分模块. 这是因为我们拆分的模块没有被动态加载.

由于我们按路由拆分模块, 并且我们的路由是Reagent组件, 我们需要创建一个能够懒加载模块的组件.

对于其他不在React生命周期中的代码, 可以使用=shadow.loader/load=函数在需要时加载模块:


#+begin_src clojure
;; load返回一个goog.async.Deferred, 可以像promise一样使用
(-> (loader/load "extra")
    (.then fn-to-call-on-load fn-to-call-on-error))
#+end_src


*示例复制自[Shadow Docs](https://shadow-cljs.github.io/docs/UsersGuide.html#_loading_code_dynamically)*

让我们创建一个 =lazy-comp= 组件来动态加载我们的Reagent组件:

#+BEGIN_SRC clojure
<<[./tinycanva/src/app/components/lazy.cljs](./protected/source_code/tinycanva/src/app/components/lazy.cljs)
#+END_SRC

我们使用 =shadow.lazy= 命名空间并在 =component-did-mount= 中调用 =load= 方法 =loadable= 参数. =loadable= 是我们要加载的组件. =load= 函数接受一个可加载参数和一个回调. 我们的回调将 =loaded= 状态更新为 =true=.

在render方法中, 我们然后检查 =loaded= 状态是否为 =true=, 并相应地渲染. =loadable= 是一个类似原子的对象, 可以解引用以获取动态加载的模块.

在我们的情况下, 动态加载的模块将是一个Reagent组件, 因此我们将其渲染为 =[@loadable]=. 这将在一瞬间变得有意义!

**** 删除 =:require= 语句
Shadow无法拆分模块, 因为 =app.core= =:require= 所有页面, 从而导致无法拆分的图. 我们可以安全地删除需要 =login=, =register= 和 =graphics= 页面的向量:

#+BEGIN_SRC clojure :crop-start-line 8 :crop-end-line 11
<<[./tinycanva/src/app/core.cljs](./protected/source_code/tinycanva/src/app/core.cljs)
#+END_SRC

现在我们需要使用 =lazy-comp= 加载这些模块. 为此, 我们需要 =:require= =lazy-comp= 和 =shadow.lazy= 包:

#+BEGIN_SRC clojure :crop-start-line 12 :crop-end-line 13
<<[./tinycanva/src/app/core.cljs](./protected/source_code/tinycanva/src/app/core.cljs)
#+END_SRC

最后, 我们可以更新 =root-router= 以懒加载渲染组件:

#+BEGIN_SRC clojure :crop-start-line 24 :crop-end-line 42
<<[./tinycanva/src/app/core.cljs](./protected/source_code/tinycanva/src/app/core.cljs)
#+END_SRC

我们用 =lazy-comp= 替换了实际组件, 并将所需组件传递给 =sl/loadable=. =shadow.lazy/loadable= 是一个宏, 它接受一个命名空间限定的定义, 找出它所在的模块, 并提供一个API来加载此模块.

=sl/loadable= 是一个宏而不是函数, 不能移动到 =lazy-comp= 内部. 这作为 =loadable= 参数传递给 =lazy-comp=, 当使用 =@= 解引用时返回组件.

现在, 如果加载应用(在注销状态下)并从 =/= 索引导航到 =/login=, 会看到一个网络调用以加载 =login.js= (可能还有消息 =Lazy loading ...=):


[[file:public/assets/lazy-login.gif]]

直接使用 =lazy-comp= (=[lazy-comp (sl/loadable app.pages.graphics/page)]=)对于 =/graphics= 路由不起作用, 因为react-router的 =Redirect= 与 =Switch= 有一些问题, 并且它阻止组件渲染:
- https://stackoverflow.com/questions/42875949/react-router-v4-redirect-not-working?rq=1
- https://github.com/ReactTraining/react-router/issues/6840

通过添加额外的包装器 =graphics-container=, 组件加载正常.

**** 检查进展
如果您再次检查报告, 您会注意到我们将=main=包大小减少到1.83 MB(之前为2.1 MB). 这主要是因为Fabric被拆分并移动到 =graphics= 模块:

- 模块: :main [JS: 1.83 MB] [GZIP: 546.65 KB]
- 模块: :login [JS: 2.18 KB] [GZIP: 839]
- 模块: :register [JS: 1.38 KB] [GZIP: 596]
- 模块: :graphics [JS: 336.62 KB] [GZIP: 96.58 KB]

根据应用不同, 可能能够创建更多模块并节省更多字节, 从而带来更流畅的体验.

**** 结论
在本章中, 我们了解了Shadow的懒加载机制. 然后我们配置Shadow将应用拆分为更小的模块, 并更新代码以在运行时加载模块.
